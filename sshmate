#!/bin/bash
# set -x
DELIMITER="|"

flag_add_name=false
flag_add_connection=false
flag_add_name_with_description=false

SSHMATE_FILE=".sshmate"
# not implemented yet
SSHMATE_LOG_DIR=".log"
SSHMATE_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
SSHMATE_FILE_PATH="${SSHMATE_DIR}/${SSHMATE_FILE}"

cecho()
{
  CLEAR="\033[2J"
  BLACK="\033[30m"
  RED="\033[31m"
  GREEN="\033[32m"
  YELLOW="\033[33m"
  WHITE="\033[99m"
  ENDCOLOR="\033[0m"
  while [ "$1" ]; do
    case $1 in
         -y|--yellow) color=$YELLOW;;
         -r|--red) color=$RED;;
         -g|--green) color=$GREEN;;
         -b|--black) color=$BLACK;;
         -w|--white) color=$WHITE;;
         -c|--clear) color=$CLEAR;;
         *) echo -en "$1"; shift; continue;;
    esac
    echo -ne "${color}"
    shift
  done
  echo -ne "${ENDCOLOR}"
}

add_connection()
{
  cecho --yellow "Adding [$2] connection with the name: $1"
  echo "$1|$2" >> "$SSHMATE_FILE_PATH"
}

check_connection_in_file()
{
  grep -m 1 -i $1 $SSHMATE_FILE_PATH
  return $?
}

get_connection_name()
{
    read connection<<<$(echo $1 | cut -d "$DELIMITER" -f 1)
    echo $connection
}

get_connection_name_from_file()
{
    read connection<<<$(cat $1 | cut -d "$DELIMITER" -f 1)
    echo $connection
}

get_connection_by_name()
{
    connection=$(grep -m 1 -i $1 $SSHMATE_FILE_PATH)
    echo $connection
}

get_connection_cmd()
{
    read connection<<<$(echo $1 | cut -d "$DELIMITER" -f 2)
    echo $connection
}

# list_connection_ids()
# {
#     while IFS= read -r line
#     do
#         read name<<<$(echo $line | cut -d "$DELIMITER" -f 1)
#         read connection<<<$(echo $line | cut -d "$DELIMITER" -f 2)
#         printf "%-40s  ==>  %s\n" "$(cecho --red $name)" "$(cecho --green $connection)"
#     done < "$SSHMATE_FILE_PATH"
# }

split_connection_entry()
{
    while IFS= read -r line
    do
        read name<<<$(echo $line | cut -d "$DELIMITER" -f 1)
        read connection<<<$(echo $line | cut -d "$DELIMITER" -f 2)
        printf "%-40s  ==>  %s\n" "$(cecho --red $name)" "$(cecho --green $connection)"
    done < "$SSHMATE_FILE_PATH"
}

# add_description_log "added new description"
add_description_log()
{
  echo "description is: " "$2"
  check_connection=$(check_connection_in_file $1)
  connection_name=$(get_connection_name "$check_connection")
  [ -z "${connection_name}" ] && { cecho --red "No connection match found. Exit now."; exit 0; }
  echo "got connection: " "$connection_name"
  echo "$2" >> "${SSHMATE_DIR}/.${connection_name}.ssh.mate"
}

# get a connection by the a description match in the log
get_connection_by_description()
{
  filename=$(grep -l -ir $1 ${SSHMATE_DIR}/.[^.]*.ssh.mate -m 1 --exclude sshmate --exclude-dir .git)
  filename="$(basename "${filename}")"
  filename=$(echo "${filename}" | sed -E 's/.(.*).ssh.mate/\1/' | tr -d "[:blank:]")
  [ -z "${filename}" ] && { cecho --red "No match found. Exit now."; exit 0; }
  connection=$(get_connection_by_name $filename)
  connection_cmd=$(get_connection_cmd $connection)
  echo $connection_cmd
}

remove_connection()
{
  # connection=$(grep -m 1 -w $1 $SSHMATE_FILE_PATH)
  # echo $connection
  if grep -m 1 -w $1 $SSHMATE_FILE_PATH
  then
    echo "found match"
    # gsed -ni '/^mewnewconn/d;p' .sshmate
    # set -x
    gsed -i "/^$1/d" .sshmate
  else
    echo "didn't find anything.."
  fi
}


# TODO: add log dir SSHMATE_LOG_DIR
# add new connection with new ID and address 
# add new description log to an existing connection ID
# delete a connection
# use a connection
# list all connections
while getopts "a:n:ld:c:r:s:" flag
do
    case "${flag}" in
        # -a : add new connection with this name (ID)
        a)
            new_connection=${OPTARG}
            flag_add_name=true
            #add_connection $new_connection
            echo "adding new connection.."
            ;;
        # -n : add connection address
        n)
            connection_name=${OPTARG}
            flag_add_connection=true
            #check_connection_in_file
            ;;
        d)
            connection_description=${OPTARG} 
            flag_add_name_with_description=true
            cecho --yellow "add a description to existing connection\n"
            ;;
        l)
            #list_connection=${OPTARG}
            cecho --yellow "listing all SSH connections...\n"
            split_connection_entry
            ;;
        # remove connection
        r)
            new_connection=${OPTARG}
            cecho --red "deleting connection: $new_connection\n"
            remove_connection $new_connection
            ;;
        s)
            connection_cmd=$(get_connection_by_description ${OPTARG})
            echo
            ssh $connection_cmd
            ;;
        c)
            check_connection=${OPTARG}
            cecho --yellow "checking connection:" --green $check_connection
            echo
            check_connection=$(check_connection_in_file $check_connection)
            connection=$(get_connection_by_name $check_connection)
            connection_cmd=$(get_connection_cmd $connection)
            cecho --yellow "connecting to: " --green $connection_cmd
            echo
            cecho --green "ssh $connection_cmd"
            echo
            ssh $connection_cmd
            ;;
        *)
           exit 0
    esac
done

  # -n -a
  # sshmate -n myvm2 -a user1@10.10.10.1
if $flag_add_name && $flag_add_connection; then
  add_connection "$connection_name" "$new_connection"
fi

# -a -d
# sshmate -a myvm2 -d "created new vm snapshot for new dev packages"
if $flag_add_name  && $flag_add_name_with_description; then
  # set -x
  add_description_log "$new_connection" "$connection_description"
fi